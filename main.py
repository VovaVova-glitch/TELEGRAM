from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, MessageHandler, filters
)

import os

TOKEN = os.getenv("BOT_TOKEN")  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–∞ Render

# –°–æ—Å—Ç–æ—è–Ω–∏—è
GOAL, GENDER, AGE, HEIGHT, WEIGHT, ACTIVITY, TRAINING, GOAL_MEAL = range(8)
DAYS_HOME, TIME_HOME, EQUIP_HOME, GOAL_HOME = range(100, 104)
DAYS_GYM, TIME_GYM, EXPERIENCE_GYM, GOAL_GYM = range(200, 204)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç üí™\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –ö–ë–ñ–£, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ–º!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/kcal ‚Äî —Ä–∞—Å—á—ë—Ç –ö–ë–ñ–£\n"
        "/meal ‚Äî —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å\n"
        "/meal_week ‚Äî —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "/workout_home ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–º–∞\n"
        "/workout_gym ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–ª–µ\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∞"
    )

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ö–ë–ñ–£
async def start_kcal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    reply_keyboard = [['–ø–æ—Ö—É–¥–µ—Ç—å', '–Ω–∞–±—Ä–∞—Ç—å', '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å']]
    await update.message.reply_text("üßÆ 1Ô∏è‚É£ –ö–∞–∫–∞—è —Ç–≤–æ—è —Ü–µ–ª—å?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['goal'] = update.message.text.lower()
    reply_keyboard = [['–º', '–∂']]
    await update.message.reply_text("2Ô∏è‚É£ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['gender'] = update.message.text.lower()
    await update.message.reply_text("3Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
    return AGE

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['age'] = int(update.message.text)
    await update.message.reply_text("4Ô∏è‚É£ –£–∫–∞–∂–∏ —Ä–æ—Å—Ç (—Å–º):")
    return HEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['height'] = int(update.message.text)
    await update.message.reply_text("5Ô∏è‚É£ –£–∫–∞–∂–∏ –≤–µ—Å (–∫–≥):")
    return WEIGHT

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['weight'] = int(update.message.text)
    reply_keyboard = [['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π']]
    await update.message.reply_text("6Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return ACTIVITY

async def activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['activity'] = update.message.text.lower()
    reply_keyboard = [['–¥–æ–º', '–∑–∞–ª', '–Ω–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å']]
    await update.message.reply_text("7Ô∏è‚É£ –ì–¥–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return TRAINING

async def training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    d = context.user_data
    d['training'] = update.message.text.lower()
    bmr = 10 * d["weight"] + 6.25 * d["height"] - 5 * d["age"] + (5 if d["gender"] == "–º" else -161)
    factor = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.5, "–≤—ã—Å–æ–∫–∏–π": 1.75}.get(d["activity"], 1.2)
    bmr *= factor
    if d["goal"] == "–ø–æ—Ö—É–¥–µ—Ç—å": bmr -= 300
    elif d["goal"] == "–Ω–∞–±—Ä–∞—Ç—å": bmr += 300
    kcal = round(bmr)
    protein = round(d["weight"] * 2)
    fat = round(d["weight"] * 1)
    carbs = round((kcal - (protein * 4 + fat * 9)) / 4)
    await update.message.reply_text(
        f"‚úÖ –ö–ë–ñ–£:\nüî∏ –ö–∞–ª–æ—Ä–∏–∏: {kcal} –∫–∫–∞–ª\nüî∏ –ë–µ–ª–∫–∏: {protein} –≥\nüî∏ –ñ–∏—Ä—ã: {fat} –≥\nüî∏ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# /meal
async def meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    reply_keyboard = [['–ø–æ—Ö—É–¥–µ—Ç—å', '–Ω–∞–±—Ä–∞—Ç—å', '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å']]
    await update.message.reply_text("üçΩ –ö–∞–∫–∞—è —Ü–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GOAL_MEAL

async def meal_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.lower()
    if goal == "–ø–æ—Ö—É–¥–µ—Ç—å":
        text = "üçè –ó–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∫–∞ + —è–π—Ü–æ\n–û–±–µ–¥: –∫—É—Ä–∏—Ü–∞ + –≥—Ä–µ—á–∫–∞\n–£–∂–∏–Ω: —Ç–≤–æ—Ä–æ–≥ + –æ–≤–æ—â–∏\nüîª 1600‚Äì1800 –∫–∫–∞–ª"
    elif goal == "–Ω–∞–±—Ä–∞—Ç—å":
        text = "üí™ –ó–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∫–∞ + –±–∞–Ω–∞–Ω\n–û–±–µ–¥: —Ä–∏—Å + –≥–æ–≤—è–¥–∏–Ω–∞\n–£–∂–∏–Ω: –æ–º–ª–µ—Ç + —Ö–ª–µ–±\nüî∫ 2800‚Äì3200 –∫–∫–∞–ª"
    else:
        text = "‚öñÔ∏è –ó–∞–≤—Ç—Ä–∞–∫: —è–π—Ü–∞ + —Ö–ª–µ–±\n–û–±–µ–¥: –∫—É—Ä–∏—Ü–∞ + —Ä–∏—Å\n–£–∂–∏–Ω: —Ä—ã–±–∞ + –æ–≤–æ—â–∏\nüî∏ 2000‚Äì2200 –∫–∫–∞–ª"
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# === –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("kcal", start_kcal)],
        states={
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, goal)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
            ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, activity)],
            TRAINING: [MessageHandler(filters.TEXT & ~filters.COMMAND, training)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("meal", meal)],
        states={GOAL_MEAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, meal_result)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    ))

    app.run_polling()

if __name__ == '__main__':
    main()
